package com.ibm.semplore.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * @author yrs
 * Collision rate about 50 every 20,000,000
 */
public class Md5_BloomFilter_64bit {
	public static long HASH_URI = 3069097663303534468l;
	public static long HASH_TYPE = -95230424018221932l;
	public static long HASH_TYPE_INSTANCE = -7302756725272101313l;
	public static long HASH_TYPE_RELATION = 467244173468883851l;
	public static long HASH_TYPE_CATEGORY = -932182635515939689l;
	public static long HASH_UNIVERSAL_CATEGORY_URI = 2781463960749071549l;
	public static long HASH_UNIVERSAL_RELATION_URI = -4734823314135488255l;
	
	private BitSet_byte sets0[];
	private BitSet_byte sets1[];
	private MessageDigest md5=null;	
	private int offset0,head0,offset1,head1;
	private int collisions;
	private byte index[]=null;
	private boolean duplicate=false;
	
	public Md5_BloomFilter_64bit()throws Exception{
		md5=MessageDigest.getInstance("MD5");
		sets0 = new BitSet_byte[256];
		for (int i = 0; i < 256; ++i)
			sets0[i] = new BitSet_byte();
		sets1 = new BitSet_byte[256];
		for (int i = 0; i < 256; ++i)
			sets1[i] = new BitSet_byte();
		collisions=0;

//		set("URI"); HASH_URI = getLongID_set(); System.out.println("h(URI)="+HASH_URI); 
//		set("TYPE"); HASH_TYPE = getLongID_set(); System.out.println("h(TYPE)="+HASH_TYPE); 
//		set("TYPE_INSTANCE"); HASH_TYPE_INSTANCE = getLongID_set(); System.out.println("h(TYPE_INSTANCE)="+HASH_TYPE_INSTANCE); 
//		set("TYPE_RELATION"); HASH_TYPE_RELATION= getLongID_set(); System.out.println("h(TYPE_RELATION)="+HASH_TYPE_RELATION); 
//		set("TYPE_CATEGORY"); HASH_TYPE_CATEGORY = getLongID_set(); System.out.println("h(TYPE_CATEGORY)="+HASH_TYPE_CATEGORY);
//		set("<TOP_Category>"); HASH_UNIVERSAL_CATEGORY_URI = getLongID_set(); System.out.println("h(TOP_CATEGORY)="+HASH_UNIVERSAL_CATEGORY_URI);
//		set("UNIVERSAL_RELATION"); HASH_UNIVERSAL_RELATION_URI = getLongID_set(); System.out.println("h(TOP_RELATION)="+HASH_UNIVERSAL_RELATION_URI);
	}
	/**
	 * @return 64-bit ID in a long type. You should use it after calling the function set() or calling the function genMd5Code(),
	 * or you will get an unexpected answer.
	 */
	public long getLongID(){
		long l=index[7] & 0x000000FF;
		l=(l<<8)|(index[6] & 0x000000FF);
		l=(l<<8)|(index[5] & 0x000000FF);
		l=(l<<8)|(index[4] & 0x000000FF);
		l=(l<<8)|(index[3] & 0x000000FF);
		l=(l<<8)|(index[2] & 0x000000FF);
		l=(l<<8)|(index[1] & 0x000000FF);
		l=(l<<8)|(index[0] & 0x000000FF);
		return l;
	}
	/**
	 * 
	 * @return the 64-bit ID through a long type. You should use it after calling the function set(), or you will
	 * get an unexpected answer.
	 */
	public long getLongID_set(){
		long l=head1;
		l=(l<<24)|offset1;
		l=(l<< 8)|head0;
		l=(l<<24)|offset0;
		return l;
	}
	/**
	 * Generate md5 code for the string s.
	 * @param s 
	 */
	public void genMd5Code(String s){
		index=md5.digest(s.getBytes());
	}
	/**
	 * @return the 16-byte md5 code.
	 */
	public byte[] getBytes(){
		return index;
	}
	/**
	 * @return the latest return value generated by set() or get().   
	 */
	public boolean isDuplicate(){
		return duplicate;
	}
	
	/**
	 * @param s
	 * @return true if the string appeared before, return false if the string is a new appearance.
	 */
	public boolean set(String s){
		index=md5.digest(s.getBytes());
		{
			offset0 =  ((index[2] << 16) & 0x00FF0000)
				  	 | ((index[1] <<  8) & 0x0000FF00)
					 | (((int) index[0]) & 0x000000FF);
			head0 =    (((int) index[3]) & 0x000000FF);
			duplicate=sets0[head0].get(offset0);
		}
		{
			offset1 =  ((index[6] << 16) & 0x00FF0000)
					 | ((index[5] <<  8) & 0x0000FF00)
					 | (((int) index[4]) & 0x000000FF);
			head1 =    (((int) index[7]) & 0x000000FF);
			duplicate=duplicate&&sets1[head1].get(offset1);
		}
		if (duplicate) ++collisions;
		else {
			sets0[head0].set(offset0);
			sets1[head1].set(offset1);
		}
		
		return duplicate;
	}
	/**
	 * @param s
	 * @return true if the string appeared before, return false if the string never appears.
	 */
	public boolean get(String s){
		index=md5.digest(s.getBytes());
		{
			offset0 =  ((index[2] << 16) & 0x00FF0000)
				  	 | ((index[1] <<  8) & 0x0000FF00)
					 | (((int) index[0]) & 0x000000FF);
			head0 =    (((int) index[3]) & 0x000000FF);
			duplicate=sets0[head0].get(offset0);
		}
		{
			offset1 =  ((index[6] << 16) & 0x00FF0000)
					 | ((index[5] <<  8) & 0x0000FF00)
					 | (((int) index[4]) & 0x000000FF);
			head1 =    (((int) index[7]) & 0x000000FF);
			duplicate=duplicate&&sets1[head1].get(offset1);
		}
		return duplicate;
	}
	/**
	 * 
	 * @param s
	 * @return the number of collisions from the latest calling of clearCollisions() or the constructor.
	 */
	public int collisions(){
		return collisions;
	}
	/**
	 * Save the sets to a file named saveFileName.
	 * @param saveFileName
	 * @throws Exception
	 */
	public void saveData(String saveFileName)throws Exception{
		try{
		DataOutputStream fout=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(saveFileName)));
		for (int i = 0; i < 256; ++i)
			sets0[i].saveSet(fout);
		for (int i = 0; i < 256; ++i)
			sets1[i].saveSet(fout);
		fout.close();}
		catch(Exception e){
			throw new Exception("Error while save Sets!");
		}		
	}
	/**
	 * Load the sets from a file named loadFileName.
	 * @param loadFileName
	 * @throws Exception
	 */
	public void loadData(String loadFileName)throws Exception{
		try{
		DataInputStream fin=new DataInputStream(new BufferedInputStream(new FileInputStream(loadFileName)));
		for (int i = 0; i < 256; ++i)
			sets0[i].loadSet(fin);
		for (int i = 0; i < 256; ++i)
			sets1[i].loadSet(fin);
		fin.close();}
		catch(Exception e){
			throw new Exception("Error while load Sets!");
		}
	}
	/**
	 * Clear the sets and collisions.
	 */
	public void clear(){
		sets0 = new BitSet_byte[256];
		for (int i = 0; i < 256; ++i)
			sets0[i] = new BitSet_byte();
		sets1 = new BitSet_byte[256];
		for (int i = 0; i < 256; ++i)
			sets1[i] = new BitSet_byte();
		collisions=0;
	}
	/**
	 * Clear the collisions.
	 */
	public void clearCollisions(){
		collisions=0;
	}
	
	public static long URItoID(String URI) throws NoSuchAlgorithmException
	{
		byte[] index = MessageDigest.getInstance("MD5").digest(URI.getBytes());
		long l=index[7] & 0x000000FF;
		l=(l<<8)|(index[6] & 0x000000FF);
		l=(l<<8)|(index[5] & 0x000000FF);
		l=(l<<8)|(index[4] & 0x000000FF);
		l=(l<<8)|(index[3] & 0x000000FF);
		l=(l<<8)|(index[2] & 0x000000FF);
		l=(l<<8)|(index[1] & 0x000000FF);
		l=(l<<8)|(index[0] & 0x000000FF);
		return l;
	}
	
	public static void main(String[] args) throws NoSuchAlgorithmException, IOException {
		BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
		String line;
		while ((line=r.readLine())!=null) {
			System.out.println(URItoID(line));
		}
	}
}
